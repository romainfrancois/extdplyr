% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grp_routine.R
\name{grp_routine}
\alias{grp_routine}
\alias{grp_routine.data.frame}
\title{Mutate a character/factor based on conditions.}
\usage{
grp_routine(data, col, ..., na_as_false = FALSE, ret_factor = FALSE)

\method{grp_routine}{data.frame}(data, col, ..., na_as_false = FALSE,
  ret_factor = FALSE)
}
\arguments{
\item{data}{A data frame.}

\item{col}{The name of the new column, as a string or symbol.

This argument is passed by expression and supports
\link[rlang:quasiquotation]{quasiquotation} (you can unquote strings
and symbols). The name is captured from the expression with
\code{\link[rlang:quo_name]{rlang::quo_name()}} (note that this kind of interface where
symbols do not represent actual objects is now discouraged in the
tidyverse; we support it here for backward compatibility).}

\item{...}{Name-value pairs of expressions for group assignment. The values
are logical predicates defined in terms of variables in \code{data}. The rows
with the condition evaluated to \code{TRUE} are assigned to that group.}

\item{na_as_false}{Treat NAs as FALSE in indicators columns.}

\item{ret_factor}{Whether to convert the column into factor.
exhaustive.}
}
\description{
\code{grp_routine} functions like a serious of nested \code{ifelse} where
a series of conditions are evaluated and groups are assigned based on those
conditions.
}
\section{Methods (by class)}{
\itemize{
\item \code{data.frame}: Method for data.frame.
}}

\examples{
df <- data.frame(v1 = letters[1:5], v2 = 1:5)
df

# By default, it creates new groups
grp_routine(df, group,
            first = v1 \%in\% c("a", "b"),
            second = v2 == 3,
            third = v2 >= 4)

# Un-named conditions are auto named
grp_routine(df, group,
            v1 \%in\% c("a", "b"),
            v2 == 3,
            v2 >= 4)


\dontrun{
# stops when conditions overlap so groups are not mutually exclusive
grp_routine(df, group,
            first = v1 \%in\% c("a", "b"),
            second = v2 == 3,
            third = v2 >= 3)
}

# arguments work with standard evaluation
grp_routine(df, "group",
            "first" = v1 \%in\% c("a", "b"),
            "second" = v2 == 3,
            "third" = v2 >= 4)

# Missing values in conditions are treated with na_as_false = TRUE
df$v2 <- c(1:4, NA)
df

grp_routine(df, group,
            first = v1 \%in\% c("a", "b"),
            second = v2 == 3,
            third = v1 == "e" | v2 >= 4)

grp_routine(df, group,
            first = v1 \%in\% c("a", "b"),
            second = v2 == 3,
            third = v1 == "e" | v2 >= 4,
            na_as_false = TRUE)
}
