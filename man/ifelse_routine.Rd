% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ifelse_routine.R
\name{ifelse_routine}
\alias{ifelse_routine}
\alias{ifelse_routine_}
\title{Mutate a character/factor based on conditions.}
\usage{
ifelse_routine(data, col, ..., ret_factor = FALSE)

ifelse_routine_(data, col, ..., .dots, ret_factor = FALSE)
}
\arguments{
\item{data}{A \code{\link[base]{data.frame}} or \code{\link[dplyr]{tbl}}.}

\item{col}{Name of the generated column. Use a bare name when using NSE
functions and a character (quoted) name when using SE functions (functions
that end with underscores).}

\item{...}{Specification of group assignment. Use named conditions, like
\code{top2 = x > 5}.}

\item{ret_factor}{Whether to convert the column into factor.}

\item{.dots}{Used in conjunction with \code{...} to support both explicit
and implicit arguments.}
}
\description{
\code{ifelse_routine} functions like a serious of nested \code{ifelse} where
a series of conditions are evaluated and different values are assigned based
on those conditions.
}
\section{Functions}{
\itemize{
\item \code{ifelse_routine_}: SE version of ifelse_routine.
}}

\examples{
df <- data.frame(v1 = letters[1:5], v2 = 1:5)
df

# By default, it creates new groups
ifelse_routine(df, "group",
               first = v1 \%in\% c("a", "b"),
               second = v2 == 3,
               third = v2 >= 4)

# Gives a warning when the groups are not collectively exhaustive
ifelse_routine(df, "group",
               first = v1 \%in\% c("a", "b"),
               second = v2 == 3,
               third = v2 > 4)


# SE version
ifelse_routine_(df, "group",
               "first" = ~ v1 \%in\% c("a", "b"),
               "second" = ~ v2 == 3,
               .dots = setNames(list(~ v2 > 4), "third"))
}
