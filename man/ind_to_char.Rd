% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grp_routine.R
\name{ind_to_char}
\alias{ind_to_char}
\alias{ind_to_char.data.frame}
\alias{ind_to_char.grouped_df}
\alias{ind_to_char_}
\alias{ind_to_char_.data.frame}
\title{Convert indicator columns to single character/factor.}
\usage{
ind_to_char(data, col, ..., na_as_false = FALSE, ret_factor = FALSE,
  remove = TRUE)

\method{ind_to_char}{data.frame}(data, col, ..., na_as_false = FALSE,
  ret_factor = FALSE, remove = TRUE)

\method{ind_to_char}{grouped_df}(data, col, ..., na_as_false = FALSE,
  ret_factor = FALSE, remove = TRUE)

ind_to_char_(data, col, from, na_as_false = FALSE, ret_factor = FALSE,
  remove = TRUE)

\method{ind_to_char_}{data.frame}(data, col, from, na_as_false = FALSE,
  ret_factor = FALSE, remove = TRUE)
}
\arguments{
\item{data}{A data frame.}

\item{col}{The name of the new column, as a string or symbol.

This argument is passed by expression and supports
\link[rlang:quasiquotation]{quasiquotation} (you can unquote strings
and symbols). The name is captured from the expression with
\code{\link[rlang:quo_name]{rlang::quo_name()}} (note that this kind of interface where
symbols do not represent actual objects is now discouraged in the
tidyverse; we support it here for backward compatibility).}

\item{...}{A selection of columns. If empty, all variables are selected. See
\code{\link[dplyr]{select}} for details.}

\item{na_as_false}{Treat NAs as FALSE in indicators columns.}

\item{ret_factor}{Whether to convert the column into factor.
exhaustive.}

\item{remove}{If \code{TRUE}, remove input columns from output data frame.}

\item{from}{SE version of \code{...}. Provided for backward compatibility.}
}
\description{
This is the reverse operation of using \code{\link[stats]{model.matrix}} on a
factor. \code{ind_to_char} works like \code{tidyr::unite}, it combines
multiple indicator columns into one character/factor column and add it to
the data.
}
\section{Methods (by class)}{
\itemize{
\item \code{data.frame}: Method for data.frame.

\item \code{grouped_df}: Method for grouped_df.
}}

\examples{
# Truth table used by ind_to_char
truth_table <- expand.grid(P = c(TRUE, FALSE, NA), Q = c(TRUE, FALSE, NA))
truth_table$IND <- c("Error", "Q", NA, "P", NA, NA, NA, NA, NA)
truth_table$IND_na_as_false <-
  c("Error", "Q", "Q", "P", NA, NA, "P", NA, NA)
truth_table


# Supports converting the following atomic types to indicator
df <- data.frame(integer_ind = c(2L, 0L, 0L, 0L, 0L, 0L, 0L),
                 # non-zero integer is 1, otherwise 0.
                 logical_ind = c(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE),
                 # TRUE is 1.
                 double_ind = c(0, 0, 2.0, 0, 0, 0, 0),
                 # non-zero double is 1.
                 char_ind = c("FALSE", "FALSE", "F", "TRUE", "T", "F", "F"),
                 # "T" and "TRUE" converts to 1.
                 factor_ind = factor(c(1, 1, 1, 1, 1, 0, 1), levels = c(0, 1),
                                     labels = c(TRUE, FALSE)),
                 # Factors are converted on levels, see as.logical.factor()
                 # Note that here 0 = TRUE, 1 = FALSE, but 0 is converted to
                 # logical TRUE.
                 stringsAsFactors = FALSE)

# Keep original columns with remove = FALSE
ind_to_char(df, col = new_y, remove = FALSE)



# ind_to_char as complement to use model.matrix on a factor
model_df <- data.frame(x = 1:6, y = factor(c(letters[1:5], NA)))
model_df
ind_df <- as.data.frame(model.matrix(~ x + y - 1,
                                     model.frame(model_df,
                                                 na.action = na.pass)))
ind_df  # an indicator matrix with NAs

# Convert back to one column like model_df
ind_to_char(ind_df, new_y, ya, yb, yc, yd, ye)

# Returns a factor column
ind_to_char(ind_df, col = new_y, ya:ye, ret_factor = TRUE)


# Use select helper functions as in dplyr::select
ind_to_char(ind_df, new_y, contains("y"), remove = FALSE)
ind_to_char(ind_df, new_y, starts_with("y"), remove = FALSE)

# Using SE
ind_to_char(ind_df, col = "new_y", "ya", "yb", "yc", "yd", "ye")
}
